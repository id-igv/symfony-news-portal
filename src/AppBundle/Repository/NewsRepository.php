<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends EntityRepository
{
	/**
     * Find news by array with id'es
     * 
     * $param array
     * 
     * @return array
     */
    public function findAllByArray(array $params)
	{
		if (empty($params)) {
			return null;
		}
		
		$query = $this->createQueryBuilder('n');
        
		$query->select('n.id, n.title');
        
		foreach ($params as $key => $param) {
			$query->orWhere("n.id = $param");
		}
		
		$query = $query->getQuery();
		return $query->getResult();
	}
	
    /**
     * Find news using join
     * 
     * $param integer $id
     * 
     * @return News object
     */
    public function findNewsById($id)
    {
        $query = $this->createQueryBuilder('n');
        $query = $query
            ->leftJoin('AppBundle:User', 'u', 'WITH', 'n.authorId = u.id', null)
            ->leftJoin('AppBundle:Category', 'c', 'WITH', 'n.categoryId = c.id', null)
            ->where($query->expr()->eq('n.id', ':id'))
            ->setParameter('id', $id)
            ->getQuery();
        
        return $query->getResult();
    }
    
    /**
     * @params - contains field names (as keys) and values:
     *      [
     *          'categoryId' => ...
     *          'authorId' => ...
     *      ]
     * 
     * @return number (controlled by @count) of latest news
     */
    public function findLatestNews($params = [], $count = 5)
    {
        extract($params);
        
        $query = $this->createQueryBuilder('n');
        
        if (isset($categoryId)) {
            $query
                ->where('n.categoryId = :categoryId')
                ->setParameter('categoryId', $categoryId);
            
        }
        
        if (isset($authorId)) {
            if (isset($categoryId)) {
                $query->andWhere('n.authorId = :authorId');
            }
            else {
                $query->where('n.authorId = :authorId');
            }
            $query->setParameter('authorId', $authorId);
        }
        
        
        
        $query = $query
            ->orderBy('n.created', 'DESC')
            ->setMaxResults($count)
            ->getQuery();
        
        return $query->getResult();
    }
    
    /**
     * @return tag sets from all news
     */ 
    public function findTags()
    {
        $query = $this->createQueryBuilder('n');
        $query = $query
            ->select('n.tagSet')
            ->getQuery();
            
        return $query->getResult();
    }
    
    /**
     * @return news with user's filter
     */
    public function filter($count, $offset, Array $params = [])
    {
        $query = $this->createQueryBuilder('n');
        $query->select('n.id, n.title, n.categoryId, n.tagSet, n.created');
        
        if (empty($params)) {
            $query = $query
                ->setFirstResult($offset)
                ->setMaxResults($count)
                ->getQuery();
            
            // return $query->getDql();
            return $query->getResult();
            // return $query->getArrayResult();
        }
        
        extract($params);
        
        if (isset($dfrom)) {
            // if dfrom and dto are set
            if (isset($dto)) {
                $query->where(
                    $query->expr()->between('n.created', $dfrom, $dto)
                );
            }
            // if dto are not set, 
            else {
                $query
                    ->where($query->expr()->gte('n.created', ':drom'))
                    ->setParameter('dfrom', $dfrom);
            }
        }
        
        if (isset($dto)) {
            // if dto is set but dfrom isn't
            if (!isset($dfrom)) {
                $query
                    ->where($query->expr()->lte('n.created', ':dto'))
                    ->setParameter('dto', $dfrom);
            }
        }
        
        if (isset($tag_set)) {
            $tagFilter = $query->expr()->andX();
            
            foreach($tag_set as $tag) {
                $tagFilter->add($query->expr()->like(
                    'n.tagSet',
                    $query->expr()->literal("%{$tag}%")
                ));
            }
            
            if (isset($dfrom) || isset($dto)) {
                $query->andWhere($tagFilter);
            }
            else {
                $query->where($tagFilter);
            }
        }
        
        if (isset($category_set)) {
            $catFilter = $query->expr()->orX();
            
            foreach($category_set as $category) {
                $catFilter->add($query->expr()->eq('n.categoryId', $category));
            }
            
            if (isset($dfrom) || isset($dto) || isset($tag_set)) {
                $query->andWhere($catFilter);
            }
            else {
                $query->where($catFilter);
            }
        }
        
        $query = $query
                ->setFirstResult($offset)
                ->setMaxResults($count)
                ->getQuery();
            
        return $query->getResult();
    }
    
    /**
     * @return counted news with user's filter
     */
    public function filterCount(Array $params = [])
    {
        $query = $this->createQueryBuilder('n');
        // $query->select('COUNT(n.id)');
        $query->select($query->expr()->count('n.id'));
        
        if (empty($params)) {
            $query = $query->getQuery();
            
            return (int) $query->getSingleScalarResult();
        }
        
        extract($params);
        
        if (isset($dfrom)) {
            // if dfrom and dto are set
            if (isset($dto)) {
                $query->where(
                    $query->expr()->between('n.created', $dfrom, $dto)
                );
            }
            // if dto are not set, 
            else {
                $query
                    ->where($query->expr()->gte('n.created', ':drom'))
                    ->setParameter('dfrom', $dfrom);
            }
        }
        
        if (isset($dto)) {
            // if dto is set but dfrom isn't
            if (!isset($dfrom)) {
                $query
                    ->where($query->expr()->lte('n.created', ':dto'))
                    ->setParameter('dto', $dfrom);
            }
        }
        
        if (isset($tag_set)) {
            $tagFilter = $query->expr()->andX();
            
            foreach($tag_set as $tag) {
                $tagFilter->add($query->expr()->like(
                    'n.tagSet',
                    $query->expr()->literal("%{$tag}%")
                ));
            }
            
            if (isset($dfrom) || isset($dto)) {
                $query->andWhere($tagFilter);
            }
            else {
                $query->where($tagFilter);
            }
        }
        
        if (isset($category_set)) {
            $catFilter = $query->expr()->orX();
            
            foreach($category_set as $category) {
                $catFilter->add($query->expr()->eq('n.categoryId', $category));
            }
            
            if (isset($dfrom) || isset($dto) || isset($tag_set)) {
                $query->andWhere($catFilter);
            }
            else {
                $query->where($catFilter);
            }
        }
        
        $query = $query->getQuery();
            
        return (int) $query->getSingleScalarResult();
    }
}
